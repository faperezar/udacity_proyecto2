#NOMBRE DEL DEL RUN
name: CICD-WebApp-Udacity-$(SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
    - main

#POSIBLES TRIGGER
#trigger:
#  branches:
#    include:
#    - master
#    - releases/*
#    exclude:
#    - releases/old*

#PIPELINE SIN TRIGGER
#trigger: none

#VARIABLES
variables:
  azureServiceConnectionId: 'SVC-SPN-WA-DESA-UDACITY'
  webAppName: 'WA-DESA-UDACITY'
  vmImageName: 'ubuntu-latest'
  #Los Enviroment sirve solo para categorizar y agrupar ejecuciones (runs) de algunos jobs, idealmente los de despliegue
  environmentName: 'prod'
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.6'

##STAGE INTEGRACION CONTINUA
#ACA COMIENZA LA STAGE DE INTEGRACION CONTINUA DESDE LA INSTALACIÓN DE DEPENDENCIA COMO CONSTRUCCION DEL PARQUETE 
stages:
- stage: Build
  displayName: 'INTEGRACION CONTINUA'
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Define version de python, se usara la $(python_version)'
    

#LEVANTO EL ENTORNO VIRTUAL DE PYTHON
    - script: |
        echo "LOG: Inicio levantamiento entorno virtual"
        python -m venv antenv
        source antenv/bin/activate
        
        echo "LOG:Fin Inicio levantamiento entorno virtual"
      displayName: 'Entorno virtual'
      workingDirectory: $(projectRoot)

#EJECUTO LA INSTALACION DE DEPENDENCIAS
    - script: |
        echo "LOG: Inicio instalacion dependencias"
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
        echo "LOG:Fin instalacion dependencias"
      displayName: 'Instalación de dependencias'
      workingDirectory: $(projectRoot)

#EJECUTO REVISION DE CODITO CON PYLINT
    - script: |
        echo "LOG: Inicio revision de codigo"
        python -m pylint --disable=R,C,W1203,W0702 app.py
        python -m pylint --disable=R,C,W1203,W0702 hello.py
        echo "LOG: Fin revision de codigo"
      displayName: 'Revisión de codigo'
      workingDirectory: $(projectRoot)

#EJECUTO LOS TESTO UNITARIOS CONFIGURADOS CON PYTEST
    - script: |
        echo "LOG: Inicio Test Unitario"
        python -m pytest -vv test_hello.py
        echo "LOG: Fin Test Unitario"
      displayName: 'Test unitarios'
      workingDirectory: $(projectRoot)
      
#CONTRUYO Y PUBLICO EL ARCHIVO QUE QUIERO DEPLOYAR
    - task: ArchiveFiles@2
      displayName: 'Contruccion archivo que deployaremos'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Pubicacion archivo que deployaremos'
      artifact: drop

##STAGE DESPLIEGUE CONTINUO
#HAGO EL DEPLOY A LA WEBAPP YA CREADA A TRAVES DE LA SERVICE CONNECTION YA CREADA
- stage: Deploy
  displayName: 'DESPLIEGUE CONTINUO'
  #Notar que acá le digo que esta Stage de Deploy depende de que la Stage de Build haya sido exitosa para ejecutarse
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Define version de python, se usara la $(python_version)'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : '
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              appType: 'webAppLinux'


