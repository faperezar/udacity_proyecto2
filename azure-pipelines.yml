#NOMBRE DEL DEL RUN
name: CICD-WebApp-Udacity-$(SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
    - main

#POSIBLES TRIGGER
#trigger:
#  branches:
#    include:
#    - master
#    - releases/*
#    exclude:
#    - releases/old*

#PIPELINE SIN TRIGGER
#trigger: none

#VARIABLES
variables:
  azureServiceConnectionId: 'SVC-SPN-WA-DESA-UDACITY'
  webAppName: 'WA-DESA-UDACITY'
  vmImageName: 'ubuntu-latest'
  environmentName: 'prod'
  projectRoot: $(System.DefaultWorkingDirectory)
  python_version: '3.9'

#INDICO QUE IMAGEN DE VM VA USAR
pool:
  vmImage: $(vmImageName)

steps:
#INDICO QUE VERSION DE PYTHON USAREMOS COMO VARIABLE
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python_version)'
  displayName: 'Define version de python, se usara la $(python_version)'

#EJECUTO LA INSTALACION DE DEPENDENCIAS
- script: |
    echo "LOG: Inicio instalacion dependencias"
    pip install --upgrade pip &&\
    pip install -r requirements.txt
    
    echo "LOG:Fin instalacion dependencias"
  displayName: 'Instalación de dependencias'

#EJECUTO REVISION DE CODITO CON PYLINT
- script: |
    echo "LOG: Inicio revision de codigo"
    python -m pylint --disable=R,C,W1203,W0702 app.py
    python -m pylint --disable=R,C,W1203,W0702 hello.py
    echo "LOG: Fin revision de codigo"
  displayName: 'Revisión de codigo'

#EJECUTO LOS TESTO UNITARIOS CONFIGURADOS CON PYTEST
- script: |
    echo "LOG: Inicio Test Unitario"
    python -m pytest -vv test_hello.py
    echo "LOG: Fin Test Unitario"
  displayName: 'Test unitarios'


#CONTRUYO Y PUBLICO EL ARCHIVO QUE QUIERO DEPLOYAR
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(projectRoot)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: # (no value); this input is optional
  displayName: 'Contruccion archivo que deployaremos'

- publish: $(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip
  displayName: 'Publicacion archivo que deployaremos'
  artifact: drop


#HAGO EL DEPLOY A LA WEBAPP YA CREADA A TRAVES DE LA SERVICE CONNECTION YA CREADA

- task: AzureWebApp@1
  displayName: 'Despliegue en Azure Web App $(webAppName)'
  inputs:
    azureSubscription: $(azureServiceConnectionId)
    appName: $(webAppName)
    appType: 'webAppLinux'
    package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

    # The following parameter is specific to the Flask example code. You may
    # or may not need a startup command for your app.

    startUpCommand: ''



